# -*- coding: utf-8 -*-
"""SVM Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fJH9RhfurtAAtu59WFGhEbppslnkJ8Oi
"""

import numpy as np

class SVM_classifier():
  #initiate hyperparameters
  def __init__(self,learning_rate,no_of_iterations,lambdap):
    self.learning_rate=learning_rate
    self.no_of_iterations=no_of_iterations
    self.lambdap=lambdap


  def fit(self,X,Y):
    #no of datapoints and features
    self.m,self.n =X.shape

    #weight and bias
    self.w = np.zeros(self.n)
    self.b = 0

    #X and Y
    self.X = X
    self.Y = Y

    for i in range(self.no_of_iterations):
      self.update_weights()


  def update_weights(self):
    Y_label = np.where(self.Y <= 0,-1,1) #Label encoding - changing less then or equal to zeroes to "-1"

    for index,x_i in enumerate(self.X): #index  --> index,x_i  --> value @ index
      condition = Y_label[index]*(np.dot(x_i,self.w) - self.b) >=1 

      if(condition == True):
          dw = 2*self.lambdap*self.w
          db = 0
      else:
        dw = 2*self.lambdap*self.w-np.dot(x_i,Y_label[index])
        db = Y_label[index]
    
    self.w = self.w - self.learning_rate*dw
    self.b = self.b - self.learning_rate*db


  def predict(self,X):
    output = np.dot(X,self.w) - self.b

    predicted_label = np.sign(output)

    y_hat = np.where(predicted_label <=-1,0,1) #revert the change

    return y_hat